@model FilmsCatalog.Models.ViewModels.FilmViewModel

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal bg-dark add-film">
        @Html.HiddenFor(m => m.MimeType)
        @Html.HiddenFor(m => m.FileName)
        <h4>Новый фильм</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-12">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CreateYear, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-12">
                @Html.EditorFor(model => model.CreateYear, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CreateYear, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-12">
                @Html.TextAreaFor(model => model.Description, 4, 1, new { @class = "form-control w-100" })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="rounded float-left dropzone-previews"></div>
        </div>
        <div class="form-group">
            @Html.Label("Постер", htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-12">
                <div id="imageDZ" class="dropzone dz-clickable"></div>
            </div>
        </div>
        <div class="form-group btn-group-justified">
            <div class="col-md-offset-2 col-md-12">
                @Html.ActionLink("Отмена", "Index", null, new { @type = "button", @class = "btn" })
                <input type="submit" value="Добавить" class="btn btn-primary ml-md-4" />
            </div>
        </div>
    </div>
}
@Scripts.Render("~/bundles/jqueryval")

<script type="text/javascript">
    var fileUrl = '@Html.Raw(Url.Action("Upload"))';
    var Image;
    var ImageDropzone = new Dropzone("div#imageDZ", {
        url: fileUrl,
        maxFiles: 1,
        acceptedFiles: 'image/*',
        uploadMultiple: false,
        parallelUploads: 1,
        addRemoveLinks: true,
        dictRemoveFile: "Удалить",
        dictMaxFilesExceeded: "Превышено максимальное количество файлов({{maxFiles}})",
        dictInvalidFileType: "Не верный тип файла",
        dictDefaultMessage: "Перетащите сюда файл",
        init: function () {
            this.on("addedfile", function (file) {
                ImageLoadComplite = false;
            });
        },
        success: loadFileSuccess,
        removedfile: function (file) {
            $('.dz-preview').hide();
        }
    });

    function loadFileSuccess(file, responce) {
        if (responce.message == 'Ok') {
            this.defaultOptions.success(file);
            $('#FileName').val(responce.fileName);
            $('#MimeType').val(responce.mimeType);
            }
    }

    ImageDropzone.on("removedfile", function (file) {
        $('#FileName').val(null);
        $('#MimeType').val(null);
        
    });
    //# sourceURL=addFilm.js
</script>